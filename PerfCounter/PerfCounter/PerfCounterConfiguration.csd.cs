//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PerfCounter
{
    
    
    /// <summary>
    /// The PerfCounterSection Configuration Section.
    /// </summary>
    public partial class PerfCounterSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the PerfCounterSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PerfCounterSectionSectionName = "perfCounterSection";
        
        /// <summary>
        /// Gets the PerfCounterSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::PerfCounter.PerfCounterSection Instance
        {
            get
            {
                return ((global::PerfCounter.PerfCounterSection)(global::System.Configuration.ConfigurationManager.GetSection(global::PerfCounter.PerfCounterSection.PerfCounterSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PerfCounter.PerfCounterSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::PerfCounter.PerfCounterSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region PerfCounters Property
        /// <summary>
        /// The XML name of the <see cref="PerfCounters"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PerfCountersPropertyName = "perfCounters";
        
        /// <summary>
        /// Gets or sets the PerfCounters.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The PerfCounters.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PerfCounter.PerfCounterSection.PerfCountersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::PerfCounter.PerfCounterCollection PerfCounters
        {
            get
            {
                return ((global::PerfCounter.PerfCounterCollection)(base[global::PerfCounter.PerfCounterSection.PerfCountersPropertyName]));
            }
            set
            {
                base[global::PerfCounter.PerfCounterSection.PerfCountersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace PerfCounter
{
    
    
    /// <summary>
    /// A collection of PerfCounter instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::PerfCounter.PerfCounter), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::PerfCounter.PerfCounterCollection.PerfCounterPropertyName)]
    public partial class PerfCounterCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::PerfCounter.PerfCounter"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PerfCounterPropertyName = "perfCounter";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::PerfCounter.PerfCounterCollection.PerfCounterPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::PerfCounter.PerfCounterCollection.PerfCounterPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::PerfCounter.PerfCounter)(element)).ID;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::PerfCounter.PerfCounter"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::PerfCounter.PerfCounter"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::PerfCounter.PerfCounter();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::PerfCounter.PerfCounter"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::PerfCounter.PerfCounter"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::PerfCounter.PerfCounter this[int index]
        {
            get
            {
                return ((global::PerfCounter.PerfCounter)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::PerfCounter.PerfCounter"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::PerfCounter.PerfCounter"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::PerfCounter.PerfCounter this[object id]
        {
            get
            {
                return ((global::PerfCounter.PerfCounter)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::PerfCounter.PerfCounter"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="perfCounter">The <see cref="global::PerfCounter.PerfCounter"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::PerfCounter.PerfCounter perfCounter)
        {
            base.BaseAdd(perfCounter);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::PerfCounter.PerfCounter"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="perfCounter">The <see cref="global::PerfCounter.PerfCounter"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::PerfCounter.PerfCounter perfCounter)
        {
            base.BaseRemove(this.GetElementKey(perfCounter));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::PerfCounter.PerfCounter"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::PerfCounter.PerfCounter"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::PerfCounter.PerfCounter GetItemAt(int index)
        {
            return ((global::PerfCounter.PerfCounter)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::PerfCounter.PerfCounter"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::PerfCounter.PerfCounter"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::PerfCounter.PerfCounter GetItemByKey(string id)
        {
            return ((global::PerfCounter.PerfCounter)(base.BaseGet(((object)(id)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace PerfCounter
{
    
    
    /// <summary>
    /// The PerfCounter Configuration Element.
    /// </summary>
    public partial class PerfCounter : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region CategoryName Property
        /// <summary>
        /// The XML name of the <see cref="CategoryName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CategoryNamePropertyName = "categoryName";
        
        /// <summary>
        /// Gets or sets the CategoryName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The CategoryName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PerfCounter.PerfCounter.CategoryNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string CategoryName
        {
            get
            {
                return ((string)(base[global::PerfCounter.PerfCounter.CategoryNamePropertyName]));
            }
            set
            {
                base[global::PerfCounter.PerfCounter.CategoryNamePropertyName] = value;
            }
        }
        #endregion
        
        #region CounterName Property
        /// <summary>
        /// The XML name of the <see cref="CounterName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CounterNamePropertyName = "counterName";
        
        /// <summary>
        /// Gets or sets the CounterName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The CounterName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PerfCounter.PerfCounter.CounterNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string CounterName
        {
            get
            {
                return ((string)(base[global::PerfCounter.PerfCounter.CounterNamePropertyName]));
            }
            set
            {
                base[global::PerfCounter.PerfCounter.CounterNamePropertyName] = value;
            }
        }
        #endregion
        
        #region InstanceName Property
        /// <summary>
        /// The XML name of the <see cref="InstanceName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InstanceNamePropertyName = "instanceName";
        
        /// <summary>
        /// Gets or sets the InstanceName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The InstanceName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PerfCounter.PerfCounter.InstanceNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string InstanceName
        {
            get
            {
                return ((string)(base[global::PerfCounter.PerfCounter.InstanceNamePropertyName]));
            }
            set
            {
                base[global::PerfCounter.PerfCounter.InstanceNamePropertyName] = value;
            }
        }
        #endregion
        
        #region MachineName Property
        /// <summary>
        /// The XML name of the <see cref="MachineName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MachineNamePropertyName = "machineName";
        
        /// <summary>
        /// Gets or sets the MachineName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MachineName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PerfCounter.PerfCounter.MachineNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string MachineName
        {
            get
            {
                return ((string)(base[global::PerfCounter.PerfCounter.MachineNamePropertyName]));
            }
            set
            {
                base[global::PerfCounter.PerfCounter.MachineNamePropertyName] = value;
            }
        }
        #endregion
        
        #region ID Property
        /// <summary>
        /// The XML name of the <see cref="ID"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IDPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ID.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PerfCounter.PerfCounter.IDPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string ID
        {
            get
            {
                return ((string)(base[global::PerfCounter.PerfCounter.IDPropertyName]));
            }
            set
            {
                base[global::PerfCounter.PerfCounter.IDPropertyName] = value;
            }
        }
        #endregion
    }
}
