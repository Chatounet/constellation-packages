//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Snmp
{
    
    
    /// <summary>
    /// The SnmpConfiguration Configuration Section.
    /// </summary>
    public partial class SnmpConfiguration : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the SnmpConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SnmpConfigurationSectionName = "snmpConfiguration";
        
        /// <summary>
        /// Gets the SnmpConfiguration instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::Snmp.SnmpConfiguration Instance
        {
            get
            {
                return ((global::Snmp.SnmpConfiguration)(global::System.Configuration.ConfigurationManager.GetSection(global::Snmp.SnmpConfiguration.SnmpConfigurationSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Snmp.SnmpConfiguration.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Snmp.SnmpConfiguration.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region QueryInterval Property
        /// <summary>
        /// The XML name of the <see cref="QueryInterval"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string QueryIntervalPropertyName = "queryInterval";
        
        /// <summary>
        /// Gets or sets the QueryInterval.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The QueryInterval.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Snmp.SnmpConfiguration.QueryIntervalPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="00:00:05")]
        public virtual global::System.TimeSpan QueryInterval
        {
            get
            {
                return ((global::System.TimeSpan)(base[global::Snmp.SnmpConfiguration.QueryIntervalPropertyName]));
            }
            set
            {
                base[global::Snmp.SnmpConfiguration.QueryIntervalPropertyName] = value;
            }
        }
        #endregion
        
        #region MultipleStateObjectsPerDevice Property
        /// <summary>
        /// The XML name of the <see cref="MultipleStateObjectsPerDevice"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MultipleStateObjectsPerDevicePropertyName = "multipleStateObjectsPerDevice";
        
        /// <summary>
        /// Gets or sets the MultipleStateObjectsPerDevice.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MultipleStateObjectsPerDevice.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Snmp.SnmpConfiguration.MultipleStateObjectsPerDevicePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=false)]
        public virtual bool MultipleStateObjectsPerDevice
        {
            get
            {
                return ((bool)(base[global::Snmp.SnmpConfiguration.MultipleStateObjectsPerDevicePropertyName]));
            }
            set
            {
                base[global::Snmp.SnmpConfiguration.MultipleStateObjectsPerDevicePropertyName] = value;
            }
        }
        #endregion
        
        #region Devices Property
        /// <summary>
        /// The XML name of the <see cref="Devices"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DevicesPropertyName = "devices";
        
        /// <summary>
        /// Gets or sets the Devices.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Devices.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Snmp.SnmpConfiguration.DevicesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Snmp.DeviceCollection Devices
        {
            get
            {
                return ((global::Snmp.DeviceCollection)(base[global::Snmp.SnmpConfiguration.DevicesPropertyName]));
            }
            set
            {
                base[global::Snmp.SnmpConfiguration.DevicesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Snmp
{
    
    
    /// <summary>
    /// The Device Configuration Element.
    /// </summary>
    public partial class Device : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Host Property
        /// <summary>
        /// The XML name of the <see cref="Host"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string HostPropertyName = "host";
        
        /// <summary>
        /// Gets or sets the Host.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Host.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Snmp.Device.HostPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Host
        {
            get
            {
                return ((string)(base[global::Snmp.Device.HostPropertyName]));
            }
            set
            {
                base[global::Snmp.Device.HostPropertyName] = value;
            }
        }
        #endregion
        
        #region Community Property
        /// <summary>
        /// The XML name of the <see cref="Community"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CommunityPropertyName = "community";
        
        /// <summary>
        /// Gets or sets the Community.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Community.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Snmp.Device.CommunityPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="public")]
        public virtual string Community
        {
            get
            {
                return ((string)(base[global::Snmp.Device.CommunityPropertyName]));
            }
            set
            {
                base[global::Snmp.Device.CommunityPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Snmp
{
    
    
    /// <summary>
    /// A collection of Device instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Snmp.Device), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Snmp.DeviceCollection.DevicePropertyName)]
    public partial class DeviceCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Snmp.Device"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DevicePropertyName = "device";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Snmp.DeviceCollection.DevicePropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Snmp.DeviceCollection.DevicePropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Snmp.Device)(element)).Host;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Snmp.Device"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Snmp.Device"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Snmp.Device();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Snmp.Device"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Snmp.Device"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Snmp.Device this[int index]
        {
            get
            {
                return ((global::Snmp.Device)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Snmp.Device"/> with the specified key.
        /// </summary>
        /// <param name="host">The key of the <see cref="global::Snmp.Device"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Snmp.Device this[object host]
        {
            get
            {
                return ((global::Snmp.Device)(base.BaseGet(host)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Snmp.Device"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="device">The <see cref="global::Snmp.Device"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Snmp.Device device)
        {
            base.BaseAdd(device);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Snmp.Device"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="device">The <see cref="global::Snmp.Device"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Snmp.Device device)
        {
            base.BaseRemove(this.GetElementKey(device));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Snmp.Device"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Snmp.Device"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Snmp.Device GetItemAt(int index)
        {
            return ((global::Snmp.Device)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Snmp.Device"/> with the specified key.
        /// </summary>
        /// <param name="host">The key of the <see cref="global::Snmp.Device"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Snmp.Device GetItemByKey(string host)
        {
            return ((global::Snmp.Device)(base.BaseGet(((object)(host)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
